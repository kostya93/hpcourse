//
// Automatically generated by Flow Graph Designer: C++ Code Generator Plugin version Alpha 4.14483
//
#define NOMINMAX
#include "cke_1_stubs.h"

#include "cxxopts.hpp"

int main( int argc, char *argv[] ) {
	int brightness;
	int limit;
	std::string filename;
	try
	{
		cxxopts::Options options("cke_1", "Flow graph by Intel TBB");
		options.add_options()
			("b,brightness", "brightness", cxxopts::value<int>(brightness)->default_value("125"))
			("l,limit", "limit", cxxopts::value<int>(limit)->default_value("5"))
			("f,file", "log file", cxxopts::value<std::string>(filename)->default_value("log.txt"));

		options.parse(argc, argv);
	}
	catch (const cxxopts::OptionException& e)
	{
		std::cout << "error parsing options: " << e.what() << std::endl;
		exit(1);
	}
	

	cout << "brightness = " << brightness << endl << "limit = " << limit << endl << "filename = " << filename << endl;

    graph cke_1_g0;

    limiter_node< std::vector<std::vector<int>> > limiter(cke_1_g0, limit);
    broadcast_node< std::vector<std::vector<int>> > broadcast_node_1(cke_1_g0);
    join_node< flow::tuple< std::vector<std::pair<int, int>>, std::vector<std::pair<int, int>>, std::vector<std::pair<int, int>>, std::vector<std::vector<int>> >, queueing > join_node_4(cke_1_g0);
    function_node< std::vector<std::vector<int>>, std::vector<std::pair<int, int>> > brightness_max(cke_1_g0, 1, brightness_max_body() );
    function_node< std::vector<std::vector<int>>, std::vector<std::pair<int, int>> > brightness_min(cke_1_g0, 1, brightness_min_body() );
    function_node< std::vector<std::vector<int>>, std::vector<std::pair<int, int>> > brightness_arg(cke_1_g0, 1, brightness_arg_body(brightness) );
    source_node< std::vector<std::vector<int>> > source_imgs(cke_1_g0, source_imgs_body(), false );
    function_node< tbb::flow::tuple<std::vector<std::pair<int, int>>,std::vector<std::pair<int, int>>,std::vector<std::pair<int, int>>,std::vector<std::vector<int>>>, std::vector<std::vector<int>> > rectangle_drawer(cke_1_g0, 1, rectangle_drawer_body() );
    broadcast_node< std::vector<std::vector<int>> > broadcast_node_10(cke_1_g0);
    function_node< std::vector<std::vector<int>>, int > brightness_average(cke_1_g0, 1, brightness_average_body() );
    join_node< flow::tuple< continue_msg, continue_msg >, queueing > join_node_14(cke_1_g0);
    function_node< int, continue_msg > file_writer(cke_1_g0, 1, file_writer_body(filename) );
    function_node< std::vector<std::vector<int>>, continue_msg > inverse_img(cke_1_g0, 1, inverse_img_body() );
    function_node< tbb::flow::tuple<continue_msg,continue_msg>, continue_msg > limiter_decrementer(cke_1_g0, 1, limiter_decrementer_body() );
    make_edge( limiter, broadcast_node_1);
    make_edge( source_imgs, limiter);
    make_edge( broadcast_node_1, brightness_max);
    make_edge( broadcast_node_1, brightness_min);
    make_edge( brightness_max, input_port< 0 >( join_node_4 ));
    make_edge( brightness_min, input_port< 1 >( join_node_4 ));
    make_edge( brightness_arg, input_port< 2 >( join_node_4 ));
    make_edge( join_node_4, rectangle_drawer);
    make_edge( rectangle_drawer, broadcast_node_10);
    make_edge( broadcast_node_10, brightness_average);
    make_edge( broadcast_node_1, brightness_arg);
    make_edge( broadcast_node_10, inverse_img);
    make_edge( brightness_average, file_writer);
    make_edge( file_writer, input_port< 0 >( join_node_14 ));
    make_edge( inverse_img, input_port< 1 >( join_node_14 ));
    make_edge( join_node_14, limiter_decrementer);
    make_edge( limiter_decrementer, limiter.decrement);
    make_edge( broadcast_node_1, input_port< 3 >( join_node_4 ));
    source_imgs.activate();
    cke_1_g0.wait_for_all();
	cout << "OK" << endl;
    return 0;
}
